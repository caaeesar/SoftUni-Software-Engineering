CREATE DATABASE `universities_db`;

# 01. Table Design
CREATE TABLE `countries` (
`id` INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(40) NOT NULL UNIQUE
);

CREATE TABLE `cities` (
`id` INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(40) NOT NULL UNIQUE,
`population` INT,
`country_id` INT NOT NULL,
CONSTRAINT fk_cities_countries
FOREIGN KEY (`country_id`) REFERENCES `countries`(`id`)
);

CREATE TABLE `universities` (
`id` INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(60) NOT NULL UNIQUE,
`address` VARCHAR(80) NOT NULL UNIQUE,
`tuition_fee` DECIMAL(19, 2) NOT NULL,
`number_of_staff` INT,
`city_id` INT,
CONSTRAINT fk_universities_cities
FOREIGN KEY (`city_id`) REFERENCES `cities`(`id`)
);

CREATE TABLE `students` (
`id` INT PRIMARY KEY AUTO_INCREMENT,
`first_name` VARCHAR(40) NOT NULL,
`last_name` VARCHAR(40) NOT NULL,
`age` INT,
`phone` VARCHAR(20) NOT NULL UNIQUE,
`email` VARCHAR(255) NOT NULL UNIQUE,
`is_graduated` TINYINT(1) NOT NULL,
`city_id` INT,
CONSTRAINT fk_students_cities
FOREIGN KEY (`city_id`) REFERENCES `cities`(`id`)
);

CREATE TABLE `courses` (
`id` INT PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(40) NOT NULL UNIQUE,
`duration_hours` DECIMAL(19, 2),
`start_date` DATE,
`teacher_name` VARCHAR(60) NOT NULL UNIQUE,
`description` TEXT,
`university_id` INT,
CONSTRAINT fk_courses_universities
FOREIGN KEY (`university_id`) REFERENCES `universities`(`id`)
);

CREATE TABLE `students_courses` (
`grade` DECIMAL(19, 2) NOT NULL,
`student_id` INT NOT NULL,
`course_id` INT NOT NULL,
CONSTRAINT fk__students_courses__students
FOREIGN KEY (`student_id`) REFERENCES `students`(`id`),
CONSTRAINT fk__students_courses__courses
FOREIGN KEY (`course_id`) REFERENCES `courses`(`id`)
);

# 02. Insert
/*
You will have to insert records of data into the courses table, based on the courses table.
For courses with id equal or lesser than 5, insert data in the course table with the following values:
•	name – set it to the teacher name followed by white space and then "course"
(teacher_name + " " + "course")
•	duration_hours – set it to the total number of characters from the course name and the result devided by 10.
•	start_date – set it to the start date of the course but 5 days later.
•	teacher_name – set it to the teacher name but reversed. 
•	description – set it to "Course " followed by the teacher name and the description but reversed.
 ("Course " + teacher_name + description_reversed)
•	university_id – set it to the day of the start date of the original course.
*/
INSERT INTO `courses` (`name`, `duration_hours`, `start_date`, `teacher_name`, `description`, `university_id`)
	(SELECT CONCAT(`teacher_name`, ' course'),
			CHAR_LENGTH(`name`) / 10,
            DATE_ADD(`start_date`, INTERVAL 5 DAY),
            REVERSE(`teacher_name`),
            CONCAT('Course ', `teacher_name`, REVERSE(`description`)),
            DAY(`start_date`)
    FROM `courses`
    WHERE `id` <= 5
	);

# 03. Update
/*
Due to inflation and the rising cost of living some universities must raise their tuition fees.
Raise the tuition fee by 300 for all universities with id equal or greater than 5 and less than 12 (inclusive).
*/
UPDATE `universities`
SET `tuition_fee` = `tuition_fee` + 300
WHERE `id` BETWEEN 5 AND 12;

# 04. Delete
/*
There are some minor bugs in the system and some universities didn’t send the correct information. 
Delete all universities for which we don’t have information about the number of staff.
*/
SET SQL_SAFE_UPDATES = 0;
DELETE FROM `universities`
WHERE `number_of_staff` IS NULL;

# 05. Cities
/*
Extract from the universities_db system database, info about the cities.
Order the results by population in descending order;
*/
SELECT * FROM `cities` ORDER BY `population` DESC;

# 06. Students age
/*
Write a query that returns: first_name, last_name, age, phone and email from table students. 
Filter students with age equal or higher than 21.
Order the results descending by first_name, then by email ascending, 
then by id in ascending order and show only the first 10 results.
*/
SELECT `first_name`,
	   `last_name`,
       `age`,
       `phone`,
       `email`
FROM `students`
WHERE `age` >= 21
ORDER BY `first_name` DESC, `email` ASC, `id` ASC
LIMIT 10;

# 07. New students
/*
There are some students that are not signed up for any course but want to be registered in the system with accounts. 
To find the account details write a query that returns: full_name, username and password for all students who do not have any assigned course. 
The full_name is their first_name and last_name separated by whitespace. The username is generated by using 10 characters from their email starting from the 2nd letter. 
The password is their phone number but reversed.  
Order by password in descending order.
*/
SELECT CONCAT(`first_name`, ' ', `last_name`) AS 'full_name',
	   SUBSTRING(`email`, 2, 10) AS 'username',
       REVERSE(`phone`) AS 'password' 
FROM `students` AS s
WHERE `id` NOT IN (SELECT `student_id` FROM `students_courses`)
ORDER BY `password` DESC;

# 08. Students count
/*
Every university has courses with students. 
The directors of every university want to know the total number of students assigned to courses. 
Extract from the database the students_count (total number of assigned students) in each university and the corresponding university_name. Get only those universities with students_count equal or greater than 8. 
Order the results descending by students_count and then by university_name in descending order. 
*/
SELECT COUNT(sc.`student_id`) AS 'students_count',
       u.`name` AS 'university_name'
FROM `universities` AS u
	JOIN `courses` AS c
    ON u.`id` = c.`university_id`
    JOIN `students_courses` AS sc
    ON c.`id` = sc.`course_id`
GROUP BY u.`id`
HAVING `students_count` >= 8
ORDER BY `students_count` DESC, `university_name` DESC;

# 09. Price rankings
/*
Make it easier for students when they are searching for a new university.
 From the database extract the university_name, city_name, address, price_rank and tuition_fee. 
 If the tuition fee is less then 800 (exclusive) the user must see "cheap", 
 equal or above 800 and less than 1200 it should display "normal", 
 equal or above 1200 and less than 2500 it should display "high" 
 and equal or above that it should display "expensive".  
Order the results ascending by tuition_fee.
*/
SELECT u.`name` AS 'university_name',
	   c.`name` AS 'city_name',
       u.`address`,
      (CASE
      WHEN `tuition_fee` < 800 THEN 'cheap'
      WHEN `tuition_fee` >= 800 AND `tuition_fee` < 1200 THEN 'normal'
      WHEN `tuition_fee` >= 1200 AND `tuition_fee` < 2500 THEN 'high'
      WHEN `tuition_fee` >= 2500 THEN 'expensive'
      END) AS 'price_rank',
       u.`tuition_fee`
FROM `universities` AS u
	JOIN `cities` AS c
    ON u.`city_id` = c.`id`
ORDER BY u.`tuition_fee` ASC;
       
# 10. Average grades
/*
Create a user defined function with the name udf_average_alumni_grade_by_course_name(course_name VARCHAR(60)) 
that receives a course name and returns the average grades of the grades from those students that are graduated.
*/
DELIMITER $$
CREATE FUNCTION udf_average_alumni_grade_by_course_name(course_name VARCHAR(60))
RETURNS DECIMAL(19, 2)
DETERMINISTIC
BEGIN
	RETURN (SELECT AVG(sc.`grade`)
			FROM `courses` AS c
				JOIN `students_courses` AS sc
				ON c.`id` = sc.`course_id`
				JOIN `students` AS s
				ON sc.`student_id` = s.`id`
			WHERE (c.`name` = course_name) AND (s.`is_graduated` = TRUE)
            GROUP BY c.`id`);
END $$

SELECT c.name, udf_average_alumni_grade_by_course_name('Quantum Physics') as average_alumni_grade FROM courses c 
WHERE c.name = 'Quantum Physics';

# 11. Graduate students
/*
Create a stored procedure udp_graduate_all_students_by_year which accepts the following parameters:
year_started INT
Extracts data about all courses that started on the given year, 
find the assigned students and change their graduated status to true.
*/
DELIMITER $$
CREATE PROCEDURE udp_graduate_all_students_by_year(year_started INT)
BEGIN
     UPDATE `students` AS s
		JOIN `students_courses` AS sc
        ON s.`id` = sc.`student_id`
        JOIN `courses` AS c
        ON sc.`course_id` = c.`id`
     SET `is_graduated` = TRUE
     WHERE YEAR(c.`start_date`) = year_started;
END $$

CALL udp_graduate_all_students_by_year(2017); 

